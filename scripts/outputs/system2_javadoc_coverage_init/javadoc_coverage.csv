Javadoc coverage metrics,Mon, 13 Apr 2020 19:10:51 CEST
Method,JLOC
"controller.MainController.MainController()",0
"controller.MainController.getGui()",0
"controller.MainController.getInstance()",0
"controller.MainController.isGameActive()",0
"controller.MainController.main(String[])",5
"controller.MainController.pauseGame()",0
"controller.MainController.prepare()",0
"controller.MainController.reset()",0
"controller.MainController.reset(boolean)",0
"controller.MainController.startGame()",3
"controller.MainControllerTest.beforeTest()",0
"controller.MainControllerTest.testGetGui()",0
"controller.MainControllerTest.testGetInstance()",0
"controller.MainControllerTest.testMain()",0
"controller.MainControllerTest.testStartAndPause()",0
"model.Coin.Coin(Position)",0
"model.Coin.changeState(State)",5
"model.Coin.equals(Object)",0
"model.Coin.getActiveSeconds()",0
"model.Coin.getScore()",5
"model.Coin.gotEaten()",0
"model.Coin.reduceActiveSeconds(double)",0
"model.Coin.resetActiveSeconds()",0
"model.Coin.toString()",0
"model.CoinContainer.CoinContainer()",3
"model.CoinContainer.add(Coin)",8
"model.CoinContainer.add(Container<Coin>)",5
"model.CoinContainer.contains(Coin)",0
"model.CoinContainer.equals(Object)",0
"model.CoinContainer.get(Position)",7
"model.CoinContainer.get(int)",7
"model.CoinContainer.getAll()",0
"model.CoinContainer.getMax()",5
"model.CoinContainer.iterator()",6
"model.CoinContainer.remove(Coin)",5
"model.CoinContainer.removeAll()",0
"model.CoinContainerTest.setUp()",0
"model.CoinContainerTest.tearDown()",0
"model.CoinContainerTest.testAdd()",0
"model.CoinContainerTest.testEquals()",0
"model.CoinContainerTest.testGetAll()",0
"model.CoinContainerTest.testGetMax()",0
"model.CoinContainerTest.testGetPerIndex()",0
"model.CoinContainerTest.testGetPerPosition()",0
"model.CoinContainerTest.testIterator()",0
"model.CoinContainerTest.testRemove()",0
"model.CoinTest.setUp()",0
"model.CoinTest.testChangeState()",0
"model.CoinTest.testConstructOnSamePosition()",0
"model.CoinTest.testEquals()",0
"model.CoinTest.testGetScore()",0
"model.CoinTest.testGetState()",0
"model.DynamicTarget.equals(Object)",0
"model.DynamicTarget.getHeadingTo()",5
"model.DynamicTarget.getState()",0
"model.DynamicTarget.isHeadingTo(Direction)",8
"model.DynamicTarget.move(Position)",5
"model.DynamicTarget.setHeadingTo(Direction)",5
"model.Game.Game()",3
"model.Game.changeRefreshRate(Level)",6
"model.Game.equals(Object)",7
"model.Game.gameOver()",0
"model.Game.getCoinContainer()",5
"model.Game.getEventHandlerManager()",0
"model.Game.getGhostContainer()",5
"model.Game.getInstance()",5
"model.Game.getLevel()",0
"model.Game.getMap()",5
"model.Game.getPacmanContainer()",5
"model.Game.getPlayerLifes()",0
"model.Game.getPointContainer()",5
"model.Game.getRefreshRate()",5
"model.Game.increasePlayerLifes()",0
"model.Game.initializeInternal()",3
"model.Game.isGameOver()",0
"model.Game.isInitialized()",3
"model.Game.onPacmanGotEaten()",0
"model.Game.pause()",5
"model.Game.reducePLayerLifes()",0
"model.Game.reset()",3
"model.Game.start()",5
"model.GameTest.setUp()",0
"model.GameTest.tearDown()",0
"model.GameTest.testGetCoinContainer()",0
"model.GameTest.testGetEventHandlerManager()",0
"model.GameTest.testGetGhostContainer()",0
"model.GameTest.testGetInstance()",0
"model.GameTest.testGetMap()",0
"model.GameTest.testGetPacmanContainer()",0
"model.GameTest.testGetPointContainer()",0
"model.GameTest.testGetRefreshRate()",0
"model.GameTest.testIsInitialized()",0
"model.GameTest.testPause()",0
"model.GameTest.testReset()",0
"model.GameTest.testStart()",0
"model.Ghost.Ghost(Position,Colour)",0
"model.Ghost.changeState(State)",5
"model.Ghost.eat(Target)",5
"model.Ghost.equals(Object)",0
"model.Ghost.getColour()",5
"model.Ghost.getMovedInLastTurn()",0
"model.Ghost.getName()",5
"model.Ghost.getScore()",0
"model.Ghost.getWaitingSeconds()",0
"model.Ghost.gotEaten()",0
"model.Ghost.reduceWaitingSeconds(double)",0
"model.Ghost.setColour(Colour)",5
"model.Ghost.setMovedInLastTurn(boolean)",0
"model.Ghost.setName(String)",5
"model.Ghost.toString()",0
"model.GhostContainer.GhostContainer()",3
"model.GhostContainer.add(Container<Ghost>)",5
"model.GhostContainer.add(Ghost)",8
"model.GhostContainer.contains(Ghost)",0
"model.GhostContainer.equals(Object)",0
"model.GhostContainer.get(Position)",7
"model.GhostContainer.get(int)",7
"model.GhostContainer.getAll()",6
"model.GhostContainer.getMax()",5
"model.GhostContainer.iterator()",6
"model.GhostContainer.remove(Ghost)",5
"model.GhostContainerTest.setUp()",0
"model.GhostContainerTest.testAdd()",0
"model.GhostContainerTest.testAddObjectAlreadyInList()",0
"model.GhostContainerTest.testEquals()",0
"model.GhostContainerTest.testGetAll()",0
"model.GhostContainerTest.testGetMax()",0
"model.GhostContainerTest.testGetPerIndex()",0
"model.GhostContainerTest.testGetPerPosition()",0
"model.GhostContainerTest.testIterator()",0
"model.GhostContainerTest.testRemove()",0
"model.GhostTest.setUp()",0
"model.GhostTest.tearDown()",0
"model.GhostTest.testChangeState()",0
"model.GhostTest.testEat()",0
"model.GhostTest.testGetColour()",0
"model.GhostTest.testGetScore()",0
"model.GhostTest.testGotEaten()",0
"model.GhostTest.testReduceWaitingSeconds()",0
"model.GhostTest.testSetAndGetName()",0
"model.GhostTest.testSetColour()",0
"model.Helper.quickSort(ArrayList<T>,Comparator<T>)",0
"model.Helper.quickSort(ArrayList<T>,int,int,Comparator<T>)",0
"model.Helper.shuffle(E[])",0
"model.Highscore.Highscore()",0
"model.Highscore.add(Score)",0
"model.Highscore.getInstance()",0
"model.Highscore.getScores()",0
"model.Highscore.writeToFile()",0
"model.Level.Level()",0
"model.Level.equals(Object)",0
"model.Level.getInstance()",0
"model.Level.getLevel()",0
"model.Level.getSecondsPerCoin()",0
"model.Level.nextLevel()",0
"model.Level.reset()",0
"model.LevelTest.setUp()",0
"model.LevelTest.testEquals()",0
"model.LevelTest.testGetInstance()",0
"model.LevelTest.testGetLevel()",0
"model.LevelTest.testGetSecondsPerCoin()",0
"model.LevelTest.testNextLevel()",0
"model.Map.Direction.guessDirection(MapObject)",0
"model.Map.Map()",0
"model.Map.Map(int,int)",0
"model.Map.equals(Object)",0
"model.Map.freeNeighbourFields(Position)",0
"model.Map.getInstance()",0
"model.Map.getPositionByDirectionIfMovableTo(Position,Direction)",0
"model.Map.getPositionContainer()",0
"model.Map.isObjectsPlaced()",0
"model.Map.markAllForRendering()",0
"model.Map.onNextLevel()",0
"model.Map.onPacmanGotEaten()",0
"model.Map.placeDynamicObjects()",0
"model.Map.placeObjects()",0
"model.Map.placeStaticObjects()",0
"model.Map.replaceDynamicObjects()",0
"model.Map.reset()",0
"model.Map.spawnStaticTargets()",0
"model.MapObject.equals(Object)",0
"model.MapObject.getPosition()",0
"model.MapObject.isOnPosition(Position)",0
"model.MapObject.isVisible()",0
"model.MapObject.setPosition(Position)",0
"model.MapObject.setVisible(boolean)",0
"model.MapObjectContainer.MapObjectContainer()",0
"model.MapObjectContainer.add(Container<MapObject>)",5
"model.MapObjectContainer.add(MapObject)",0
"model.MapObjectContainer.contains(MapObject)",0
"model.MapObjectContainer.equals(Object)",0
"model.MapObjectContainer.get(int)",0
"model.MapObjectContainer.getAll()",0
"model.MapObjectContainer.iterator()",0
"model.MapObjectContainer.remove(MapObject)",5
"model.MapObjectContainer.size()",0
"model.MapObjectContainerTest.setUp()",0
"model.MapObjectContainerTest.testAdd()",0
"model.MapObjectContainerTest.testContains()",0
"model.MapObjectContainerTest.testGet()",0
"model.MapObjectContainerTest.testGetAll()",0
"model.MapObjectContainerTest.testIterator()",0
"model.MapObjectContainerTest.testRemove()",0
"model.MapTest.setUp()",0
"model.MapTest.testGetInstance()",0
"model.MapTest.testGetPositionByDirectionIfMoveableTo()",0
"model.MapTest.testGetPositionContainer()",0
"model.MapTest.testReset()",0
"model.Pacman.Pacman(Position,Sex)",0
"model.Pacman.changeState(State)",0
"model.Pacman.eat(Target)",5
"model.Pacman.equals(Object)",0
"model.Pacman.getName()",0
"model.Pacman.getScore()",0
"model.Pacman.getSex()",0
"model.Pacman.gotEaten()",0
"model.Pacman.setName(String)",0
"model.Pacman.toString()",0
"model.PacmanContainer.PacmanContainer()",0
"model.PacmanContainer.add(Container<Pacman>)",5
"model.PacmanContainer.add(Pacman)",0
"model.PacmanContainer.contains(Pacman)",0
"model.PacmanContainer.get(Position)",0
"model.PacmanContainer.get(int)",0
"model.PacmanContainer.getAll()",0
"model.PacmanContainer.iterator()",0
"model.PacmanContainer.remove(Pacman)",5
"model.Placeholder.Placeholder(Position)",0
"model.Point.Point(Position)",0
"model.Point.changeState(State)",0
"model.Point.getScore()",0
"model.Point.gotEaten()",0
"model.Point.toString()",0
"model.PointContainer.PointContainer()",0
"model.PointContainer.add(Container<Point>)",5
"model.PointContainer.add(Point)",0
"model.PointContainer.contains(Point)",0
"model.PointContainer.get(Position)",0
"model.PointContainer.get(int)",0
"model.PointContainer.getAll()",0
"model.PointContainer.iterator()",0
"model.PointContainer.remove(Point)",5
"model.PointContainer.removeAll()",0
"model.PointContainer.size()",0
"model.Position.Position(int,int)",0
"model.Position.add(MapObject)",0
"model.Position.calcDistance(Position)",0
"model.Position.equals(Object)",0
"model.Position.getOnPosition()",0
"model.Position.getX()",0
"model.Position.getY()",0
"model.Position.isMoveableTo()",0
"model.Position.remove(MapObject)",0
"model.Position.toString()",0
"model.PositionContainer.PositionContainer(int,int)",0
"model.PositionContainer.add(Container<Position>)",5
"model.PositionContainer.add(Position)",5
"model.PositionContainer.contains(Position)",0
"model.PositionContainer.generateKey(Position)",0
"model.PositionContainer.generateKey(int,int)",8
"model.PositionContainer.get(int)",0
"model.PositionContainer.get(int,int)",8
"model.PositionContainer.getAll()",0
"model.PositionContainer.getRange(Position,Position)",0
"model.PositionContainer.iterator()",0
"model.PositionContainer.remove(Position)",5
"model.PositionContainer.removeAll()",0
"model.Score.Score()",3
"model.Score.addToScore(Scorable)",0
"model.Score.addToScore(int)",7
"model.Score.compareTo(Score)",0
"model.Score.equals(Object)",0
"model.Score.getScore()",5
"model.Score.toString()",0
"model.ScoreTest.setUp()",0
"model.ScoreTest.testAddToScore()",0
"model.ScoreTest.testEquals()",0
"model.ScoreTest.testGetScore()",0
"model.Settings.Settings()",0
"model.Settings.getGameMode()",0
"model.Settings.getInstance()",0
"model.Settings.setGameMode(Mode)",0
"model.Settings.setInstance(Settings)",0
"model.StaticTarget.deSpawn()",0
"model.StaticTarget.getState()",0
"model.StaticTarget.setPosition(Position)",0
"model.Wall.Wall(Position)",0
"model.Wall.toString()",0
"model.event.RendererProcess.getStartupDelay()",0
"model.event.RendererProcess.getTiming()",0
"model.event.RendererProcess.onLoad()",0
"model.event.RendererProcess.run()",0
"model.event.Timer.Timer()",0
"model.event.Timer.pauseExecution()",0
"model.event.Timer.register(Process)",0
"model.event.Timer.restartExecution()",0
"model.event.Timer.startExecution()",0
"model.event.WorkerProcess.check()",0
"model.event.WorkerProcess.getStartupDelay()",0
"model.event.WorkerProcess.getTiming()",0
"model.event.WorkerProcess.handleCoins()",0
"model.event.WorkerProcess.handleGhost(Ghost)",0
"model.event.WorkerProcess.handleGhosts()",0
"model.event.WorkerProcess.handlePacman(Pacman)",0
"model.event.WorkerProcess.handlePacmans()",0
"model.event.WorkerProcess.markDynamicObjectsForRendering()",0
"model.event.WorkerProcess.onLoad()",0
"model.event.WorkerProcess.performCollision(Pacman)",0
"model.event.WorkerProcess.performCollisions()",0
"model.event.WorkerProcess.run()",0
"model.exception.BasicUncaughtExceptionHandler.handle(Throwable)",0
"model.exception.BasicUncaughtExceptionHandler.uncaught(Throwable)",0
"model.exception.BasicUncaughtExceptionHandler.uncaughtException(Thread,Throwable)",9
"model.exception.ListException.ListException(String)",5
"model.exception.ListFullException.ListFullException(String)",6
"model.exception.ListFullExceptionTest.testConstruct()",0
"model.exception.ObjectAlreadyInListException.ObjectAlreadyInListException(String)",6
"model.exception.ObjectAlreadyInListExceptionTest.testConstruct()",0
"model.exception.ObjectNotInitializedException.ObjectNotInitializedException(String)",6
"model.exception.ObjectNotInitializedExceptionTest.testConstruct()",0
"view.ImageOrganizer.ImageOrganizer()",0
"view.ImageOrganizer.get(MapObject)",0
"view.ImageOrganizer.getInstance()",0
"view.KeyboardProcesser.keyPressed(KeyEvent)",7
"view.KeyboardProcesser.keyReleased(KeyEvent)",7
"view.KeyboardProcesser.keyTyped(KeyEvent)",7
"view.MainGui.GamePanel.paintComponent(Graphics)",0
"view.MainGui.MainGui()",0
"view.MainGui.getPnlGame()",0
"view.MainGui.getRenderer()",0
"view.MainGui.initialize()",0
"view.MainGui.initializeComponents()",0
"view.MainGui.initializeListeners()",0
"view.MainGui.onGameOver()",0
"view.MainGui.showGame()",0
"view.MainGui.showPreGame()",0
"view.Renderer.Renderer(MainGui)",0
"view.Renderer.drawString(Graphics2D,String,int)",0
"view.Renderer.markReady()",0
"view.Renderer.render()",0

Class,Jf,JLOC,Jm
"controller.MainController",40.00%,21,20.00%
"controller.MainControllerTest",100.00%,7,0.00%
"model.Coin",0.00%,17,22.22%
"model.CoinContainer",50.00%,56,66.67%
"model.CoinContainerTest",0.00%,7,0.00%
"model.CoinTest",0.00%,7,0.00%
"model.DynamicTarget",50.00%,45,75.00%
"model.DynamicTarget.State",100.00%,12,100.00%
"model.Game",71.43%,108,65.22%
"model.Game.Mode",0.00%,0,100.00%
"model.GameTest",100.00%,7,0.00%
"model.Ghost",40.00%,43,40.00%
"model.Ghost.Colour",0.00%,0,100.00%
"model.GhostContainer",100.00%,65,81.82%
"model.GhostContainerTest",0.00%,7,0.00%
"model.GhostTest",0.00%,7,0.00%
"model.Helper",100.00%,5,0.00%
"model.Highscore",0.00%,5,0.00%
"model.Level",0.00%,5,0.00%
"model.LevelTest",0.00%,7,0.00%
"model.Map",0.00%,5,0.00%
"model.Map.Direction",0.00%,0,0.00%
"model.Map.StartingPosition",0.00%,0,100.00%
"model.MapObject",0.00%,5,0.00%
"model.MapObjectContainer",0.00%,15,20.00%
"model.MapObjectContainerTest",0.00%,7,0.00%
"model.MapTest",0.00%,7,0.00%
"model.Pacman",0.00%,10,10.00%
"model.Pacman.Sex",0.00%,0,100.00%
"model.PacmanContainer",50.00%,18,22.22%
"model.Placeholder",100.00%,5,0.00%
"model.Point",100.00%,5,0.00%
"model.PointContainer",0.00%,15,18.18%
"model.Position",0.00%,7,0.00%
"model.PositionContainer",0.00%,36,38.46%
"model.Score",50.00%,25,42.86%
"model.ScoreTest",0.00%,7,0.00%
"model.Settings",0.00%,5,0.00%
"model.StaticTarget",0.00%,5,0.00%
"model.StaticTarget.State",0.00%,0,100.00%
"model.Target",100.00%,5,0.00%
"model.Wall",100.00%,7,0.00%
"model.event.RendererProcess",100.00%,5,0.00%
"model.event.Timer",0.00%,5,0.00%
"model.event.WorkerProcess",0.00%,5,0.00%
"model.exception.BasicUncaughtExceptionHandler",100.00%,14,33.33%
"model.exception.ListException",0.00%,12,100.00%
"model.exception.ListFullException",0.00%,14,100.00%
"model.exception.ListFullExceptionTest",100.00%,7,0.00%
"model.exception.ObjectAlreadyInListException",0.00%,14,100.00%
"model.exception.ObjectAlreadyInListExceptionTest",100.00%,7,0.00%
"model.exception.ObjectNotInitializedException",0.00%,14,100.00%
"model.exception.ObjectNotInitializedExceptionTest",100.00%,7,0.00%
"view.ImageOrganizer",0.00%,5,0.00%
"view.KeyboardProcesser",100.00%,26,100.00%
"view.MainGui",0.00%,0,0.00%
"view.MainGui.GamePanel",0.00%,0,0.00%
"view.Renderer",0.00%,5,0.00%

Interface,Jf,JLOC,Jm
"model.Container",100.00%,46,100.00%
"model.Scorable",100.00%,5,0.00%
"model.event.Process",100.00%,5,0.00%

Package,Jc,Jf,JLOC,Jm
"controller",100.00%,40.00%,42,13.33%
"model",83.33%,19.82%,888,23.59%
"model.event",100.00%,0.00%,48,0.00%
"model.exception",100.00%,0.00%,145,50.00%
"view",60.00%,0.00%,64,15.00%

Module,Jc,Jf,JLOC,Jm
"pacman.main",81.25%,18.18%,"1,005",28.00%
"pacman.test",100.00%,0.00%,182,0.00%

Project,Jc,Jf,JLOC,Jm
"project",98.11%,15.58%,"1,187",21.69%

